
==================== FINAL INTERFACE ====================
2019-04-23 17:03:30.466173455 UTC

interface main:Main 8063
  interface hash: 4b42a987b1717e13b718bf663d70a273
  ABI hash: 433fe06f30c6f1fa9e643666813881b6
  export-list hash: 11e875946a54eb7f121ed230082b0be2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 584713d4aa7e6991beb5cea125ec43c1
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.conway
  Main.main
  Main.midr
  Main.random
  Main.tapestry
module dependencies:
package dependencies: JuicyPixels-3.3.3 array-0.5.3.0 base-4.12.0.0
                      binary-0.8.6.0 bytestring-0.10.8.2 containers-0.6.0.1
                      deepseq-1.4.4.0 directory-1.3.3.0 filepath-1.4.2.1 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0 mtl-2.2.2 primitive-0.6.4.0 sim-0.1.0.0
                      time-1.8.0.2 transformers-0.5.5.0 unix-2.7.2.2 vector-0.12.0.2
                      zlib-0.6.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.2:Data.Vector.Unboxed
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: JuicyPixels-3.3.3:Codec.Picture.Tga
                         JuicyPixels-3.3.3:Codec.Picture.Tiff
                         JuicyPixels-3.3.3:Codec.Picture.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
                         zlib-0.6.2:Codec.Compression.Zlib.Stream
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  sim-0.1.0.0:Sim 0a021b3f4903eb2b2f40b603cd5cd974
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
0049a2cda996036bf0a0f7e0992c350c
  $wmidr :: GHC.Prim.Int# -> a -> a -> [a]
  {- Arity: 3, Strictness: <S,U><L,U><L,U>, Inline: [2],
     Unfolding: (\ @ a (ww :: GHC.Prim.Int#) (w :: a) (w1 :: a) ->
                 let {
                   mid :: [a]
                   = let {
                       lvl2 :: [a] = GHC.Types.: @ a w1 (GHC.Types.[] @ a)
                     } in
                     letrec {
                       $wxs1 :: GHC.Prim.Int# -> [a]
                         {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
                       = \ (ww1 :: GHC.Prim.Int#) ->
                         case ww1 of ds1 {
                           DEFAULT -> GHC.Types.: @ a w1 ($wxs1 (GHC.Prim.-# ds1 1#))
                           1# -> lvl2 }
                     } in
                     $wxs1 2#
                 } in
                 letrec {
                   xs :: [a] = GHC.Types.: @ a w xs
                 } in
                 let {
                   half :: GHC.Prim.Int#
                   = GHC.Prim.-# (GHC.Prim.uncheckedIShiftRA# ww 1#) 1#
                 } in
                 case GHC.Prim.andI# ww 1# of ds {
                   DEFAULT -> Main.tapestry3 @ a
                   0#
                   -> let {
                        n :: [a]
                        = GHC.Base.++
                            @ a
                            mid
                            (case GHC.Prim.<# 0# half of lwild {
                               DEFAULT -> GHC.Types.[] @ a
                               1# -> GHC.List.$wunsafeTake @ a half xs })
                      } in
                      case GHC.Prim.<# 0# half of lwild {
                        DEFAULT -> n
                        1#
                        -> letrec {
                             $wgo :: [a] -> GHC.Prim.Int# -> [a]
                               {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2] -}
                             = \ (w2 :: [a]) (ww1 :: GHC.Prim.Int#) ->
                               case w2 of wild {
                                 [] -> n
                                 : y ys
                                 -> case ww1 of ds1 {
                                      DEFAULT -> GHC.Types.: @ a y ($wgo ys (GHC.Prim.-# ds1 1#))
                                      1# -> GHC.Types.: @ a y n } }
                           } in
                           $wgo xs half }
                   1#
                   -> let {
                        n :: [a]
                        = GHC.Base.++
                            @ a
                            mid
                            (let {
                               y :: GHC.Prim.Int# = GHC.Prim.+# half 1#
                             } in
                             case GHC.Prim.<# 0# y of lwild {
                               DEFAULT -> GHC.Types.[] @ a 1# -> GHC.List.$wunsafeTake @ a y xs })
                      } in
                      case GHC.Prim.<# 0# half of lwild {
                        DEFAULT -> n
                        1#
                        -> letrec {
                             $wgo :: [a] -> GHC.Prim.Int# -> [a]
                               {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2] -}
                             = \ (w2 :: [a]) (ww1 :: GHC.Prim.Int#) ->
                               case w2 of wild {
                                 [] -> n
                                 : y ys
                                 -> case ww1 of ds1 {
                                      DEFAULT -> GHC.Types.: @ a y ($wgo ys (GHC.Prim.-# ds1 1#))
                                      1# -> GHC.Types.: @ a y n } }
                           } in
                           $wgo xs half } }) -}
1c95143137dfe8cc4e67a116f2666bb4
  $wxs :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2, Inline: [2] -}
946ee5ffaf887d1b17832f6363790824
  conway :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.conway1) -}
6063ff81435ff45031935869becbc367
  conway1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("......................................................................................x.......................xxx.....................xxxxx..........................................................................................................................................................................xxxxx.....................xxx.......................x........................................................................................"#) -}
7a0a0300f371e79ffbabfa3ea2cf6a90
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5f99b0cacc037d3ce4bde0fad02c0de0
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Sim.run1 Main.tapestry) -}
2c03fa77e660b3b7d0d3d8e2088bf2c7
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
d98bbf1540ce1a1e7bf5be200370caf9
  midr :: GHC.Types.Int -> a -> a -> [a]
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: a) (w2 :: a) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wmidr @ a ww1 w1 w2 }) -}
b553cacb6c495d9af56ba1913b9d535d
  random :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.random1) -}
4e5fee3b935e987791522ea5eb403614
  random1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("..xx.xx.xx.xx.xx.xx.xx.xx...x.xx..xxx.xx.x.x......xx.x.xxxxx.xx..x.xx...........xxxx.x...x..xxx.....xx..xxx...xxx....x.xx.xx..........xxxxx............x.xx.x..x.xx.x..x.xx..x..........................x.x.xx..x..xx..x.xx.x..........x..x.x.x.x.xx.x..x...x.x..x.xx.......................x.xx.x..x..x..x...xxx.x.xxx.xx.xxxxx.xx............xxx.......................x.............xxx.xx.x.xxx.xxx.xxx.xx.......xxxxxxxxxxxxx........x.x.x..x.x.x.x.x.xxx.xx."#) -}
83de513c973f42623581ebbd382f30ee
  tapestry :: [GHC.Types.Char]
  {- Unfolding: (Main.tapestry_go
                   (Main.$wmidr
                      @ [GHC.Types.Char]
                      600#
                      Main.tapestry4
                      Main.tapestry1)) -}
792af884d577f9f7b04d3f89aa776549
  tapestry1 :: [GHC.Types.Char]
  {- Unfolding: (Main.$wmidr
                   @ GHC.Types.Char
                   600#
                   Main.tapestry_x
                   Main.tapestry2) -}
76b796211cf91d15867d4bf57463c9bf
  tapestry2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'x'#) -}
c523a5e5fe2ba77a9978f3493385b9a4
  tapestry3 :: [a]
  {- Strictness: x -}
e34fb3d55aed925c9398eb4177fbb431
  tapestry4 :: [GHC.Types.Char]
  {- Unfolding: (Main.$wxs 600#) -}
8b39963dc817e45c53226ed878500f6d
  tapestry_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e2b8b9c26ecd5b5c986db1d86182a575
  tapestry_x :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '.'#) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

